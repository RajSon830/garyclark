<?php

declare(strict_types=1);

namespace Doctrine\DBAL\Schema;

use Doctrine\DBAL\Schema\Exception\InvalidUniqueConstraintDefinition;
use Doctrine\DBAL\Schema\Name\Parser\UnqualifiedNameParser;
use Doctrine\DBAL\Schema\Name\Parsers;
use Doctrine\DBAL\Schema\Name\UnqualifiedName;

use function count;

/**
 * Represents unique constraint definition.
 *
 * @extends AbstractOptionallyNamedObject<UnqualifiedName>
 */
final class UniqueConstraint extends AbstractOptionallyNamedObject
{
    /**
     * @internal Use {@link UniqueConstraint::editor()} to instantiate an editor and
     *           {@link UniqueConstraintEditor::create()} to create a unique constraint.
     *
     * @param ?UnqualifiedName                $name        Name of the unique constraint. If omitted, the name will be
     *                                                     generated by the underlying database platform. To facilitate
     *                                                     managing the constraint using DBAL, specifying the name
     *                                                     explicitly is recommended.
     * @param non-empty-list<UnqualifiedName> $columnNames Names of the columns covered by the unique constraint.
     */
    public function __construct(
        ?UnqualifiedName $name,
        private readonly array $columnNames,
        private readonly bool $isClustered,
    ) {
        if (count($columnNames) < 1) {
            throw InvalidUniqueConstraintDefinition::columnNamesAreNotSet();
        }

        parent::__construct($name?->toString() ?? '');
    }

    protected function getNameParser(): UnqualifiedNameParser
    {
        return Parsers::getUnqualifiedNameParser();
    }

    /**
     * Returns the names of the columns the constraint is associated with.
     *
     * @return non-empty-list<UnqualifiedName>
     */
    public function getColumnNames(): array
    {
        return $this->columnNames;
    }

    /**
     * Returns whether the unique constraint is clustered.
     */
    public function isClustered(): bool
    {
        return $this->isClustered;
    }

    /**
     * Instantiates a new unique constraint editor.
     */
    public static function editor(): UniqueConstraintEditor
    {
        return new UniqueConstraintEditor();
    }

    /**
     * Instantiates a new unique constraint editor and initializes it with the constraint's properties.
     */
    public function edit(): UniqueConstraintEditor
    {
        return self::editor()
            ->setName($this->name)
            ->setColumnNames(...$this->columnNames)
            ->setIsClustered($this->isClustered);
    }
}
