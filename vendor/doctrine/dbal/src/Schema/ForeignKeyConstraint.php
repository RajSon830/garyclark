<?php

declare(strict_types=1);

namespace Doctrine\DBAL\Schema;

use Doctrine\DBAL\Schema\Exception\InvalidForeignKeyConstraintDefinition;
use Doctrine\DBAL\Schema\ForeignKeyConstraint\Deferrability;
use Doctrine\DBAL\Schema\ForeignKeyConstraint\MatchType;
use Doctrine\DBAL\Schema\ForeignKeyConstraint\ReferentialAction;
use Doctrine\DBAL\Schema\Name\OptionallyQualifiedName;
use Doctrine\DBAL\Schema\Name\Parser\UnqualifiedNameParser;
use Doctrine\DBAL\Schema\Name\Parsers;
use Doctrine\DBAL\Schema\Name\UnqualifiedName;
use Doctrine\DBAL\Schema\Name\UnquotedIdentifierFolding;

use function count;

/**
 * An abstraction class for a foreign key constraint.
 *
 * @extends AbstractOptionallyNamedObject<UnqualifiedName>
 */
final class ForeignKeyConstraint extends AbstractOptionallyNamedObject
{
    /**
     * @internal Use {@link ForeignKeyConstraint::editor()} to instantiate an editor and
     *           {@link ForeignKeyConstraintEditor::create()} to create a foreign key constraint.
     *
     * @param ?UnqualifiedName                $name                   Name of the foreign key constraint. If omitted,
     *                                                                the name will be generated by the underlying
     *                                                                database platform. To facilitate managing the
     *                                                                constraint or the referencing table using DBAL,
     *                                                                specifying the name explicitly is recommended.
     * @param non-empty-list<UnqualifiedName> $referencingColumnNames Names of the referencing table columns.
     * @param OptionallyQualifiedName         $referencedTableName    Referenced table name.
     * @param non-empty-list<UnqualifiedName> $referencedColumnNames  Names of the referenced table columns.
     * @param MatchType                       $matchType              The match type of the foreign key constraint.
     * @param ReferentialAction               $onUpdateAction         The referential action for <code>UPDATE</code>
     *                                                                operations.
     * @param ReferentialAction               $onDeleteAction         The referential action for <code>DELETE</code>
     *                                                                operations.
     * @param Deferrability                   $deferrability          Whether the constraint is or can be deferred.
     */
    public function __construct(
        ?UnqualifiedName $name,
        private readonly array $referencingColumnNames,
        private readonly OptionallyQualifiedName $referencedTableName,
        private readonly array $referencedColumnNames,
        private readonly MatchType $matchType,
        private readonly ReferentialAction $onUpdateAction,
        private readonly ReferentialAction $onDeleteAction,
        private readonly Deferrability $deferrability,
    ) {
        $referencingColumnCount = count($referencingColumnNames);
        $referencedColumnCount  = count($referencedColumnNames);

        if ($referencingColumnCount < 1) {
            throw InvalidForeignKeyConstraintDefinition::referencingColumnNamesNotSet();
        }

        if ($referencedColumnCount < 1) {
            throw InvalidForeignKeyConstraintDefinition::referencedColumnNamesNotSet();
        }

        if ($referencingColumnCount !== $referencedColumnCount) {
            throw InvalidForeignKeyConstraintDefinition::nonMatchingColumnNameCounts(
                $referencingColumnCount,
                $referencedColumnCount,
            );
        }

        parent::__construct($name?->toString() ?? '');
    }

    protected function getNameParser(): UnqualifiedNameParser
    {
        return Parsers::getUnqualifiedNameParser();
    }

    /**
     * Returns the names of the referencing table columns the foreign key constraint is associated with.
     *
     * @return non-empty-list<UnqualifiedName>
     */
    public function getReferencingColumnNames(): array
    {
        return $this->referencingColumnNames;
    }

    /**
     * Returns the names of the referenced table columns the foreign key constraint is associated with.
     */
    public function getReferencedTableName(): OptionallyQualifiedName
    {
        return $this->referencedTableName;
    }

    /**
     * Returns the names of the referenced table columns the foreign key constraint is associated with.
     *
     * @return non-empty-list<UnqualifiedName>
     */
    public function getReferencedColumnNames(): array
    {
        return $this->referencedColumnNames;
    }

    /**
     * Returns the match type of the foreign key constraint.
     */
    public function getMatchType(): MatchType
    {
        return $this->matchType;
    }

    /**
     * Returns the referential action for <code>UPDATE</code> operations.
     */
    public function getOnUpdateAction(): ReferentialAction
    {
        return $this->onUpdateAction;
    }

    /**
     * Returns the referential action for <code>DELETE</code> operations.
     */
    public function getOnDeleteAction(): ReferentialAction
    {
        return $this->onDeleteAction;
    }

    /**
     * Returns whether the constraint is or can be deferred.
     */
    public function getDeferrability(): Deferrability
    {
        return $this->deferrability;
    }

    /**
     * Returns whether this foreign key constraint is equal to the other.
     *
     * For the constraints to be comparable, both must either reference a table by the name with a qualifier or by the
     * name with no qualifier.
     */
    public function equals(self $other, UnquotedIdentifierFolding $folding): bool
    {
        if ($this === $other) {
            return true;
        }

        if (! $this->referencedTableName->equals($other->referencedTableName, $folding)) {
            return false;
        }

        if (! $this->columnsNamesEqual($this->referencingColumnNames, $other->referencingColumnNames, $folding)) {
            return false;
        }

        if (! $this->columnsNamesEqual($this->referencedColumnNames, $other->referencedColumnNames, $folding)) {
            return false;
        }

        if ($this->matchType !== $other->matchType) {
            return false;
        }

        if ($this->onUpdateAction !== $other->onUpdateAction) {
            return false;
        }

        if ($this->onDeleteAction !== $other->onDeleteAction) {
            return false;
        }

        return $this->deferrability === $other->deferrability;
    }

    /**
     * @param list<UnqualifiedName> $thisNames
     * @param list<UnqualifiedName> $otherNames
     */
    private function columnsNamesEqual(
        array $thisNames,
        array $otherNames,
        UnquotedIdentifierFolding $folding,
    ): bool {
        if (count($thisNames) !== count($otherNames)) {
            return false;
        }

        for ($i = 0, $count = count($thisNames); $i < $count; $i++) {
            if (! $thisNames[$i]->equals($otherNames[$i], $folding)) {
                return false;
            }
        }

        return true;
    }

    /**
     * Instantiates a new foreign key constraint editor.
     */
    public static function editor(): ForeignKeyConstraintEditor
    {
        return new ForeignKeyConstraintEditor();
    }

    /**
     * Instantiates a new foreign key constraint editor and initializes it with the constraint's properties.
     */
    public function edit(): ForeignKeyConstraintEditor
    {
        return self::editor()
            ->setName($this->name)
            ->setReferencedTableName($this->referencedTableName)
            ->setReferencingColumnNames(...$this->referencingColumnNames)
            ->setReferencedColumnNames(...$this->referencedColumnNames)
            ->setMatchType($this->matchType)
            ->setOnDeleteAction($this->onDeleteAction)
            ->setOnUpdateAction($this->onUpdateAction)
            ->setDeferrability($this->deferrability);
    }
}
